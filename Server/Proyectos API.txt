Así debe quedar Program.cs para API:

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<JardineriaContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("XXXXXXXX") ?? throw new InvalidOperationException("Connection string 'XXXXXXXX' not found."))); // Base de datos de Productos/Articulos.

builder.Services.AddDbContext<CesarContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("CesarUsers") ?? throw new InvalidOperationException("Connection string 'CesarUsers' not found."))); // Base de Datos de Usuarios

builder.Services.AddControllers().AddJsonOptions(x => x.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles); // Para Evitar que los JSON Hagan un Bucle Infinito.

builder.Services.AddIdentityCore<JardinUser>(options =>
{
    options.SignIn.RequireConfirmedAccount = false;
})
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<CesarContext>(); // El Método Más Simple para Agregar Identity, usa AddIdentityCore<IdentityUser> que es el contexto de Usuarios.

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.RequireHttpsMetadata = false;
        options.SaveToken = true;
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
        };
    }); // Método para la Autenticación por Token.

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen(option =>
{
    option.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        In = ParameterLocation.Header,
        Description = "Pega el Token del Usuario Logueado",
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        BearerFormat = "JWT",
        Scheme = "bearer"
    });
    option.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[]{ }
        }
    });
}); // Este Método Habilita Swagger para Hacer la Pruebas de la API Autenticando Usuarios con el Token.

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();

Las Conexiones a las Bases de Datos en appsettings.json:

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "GameStore": "Server=(localdb)\\mssqllocaldb;Database=GameStore;Trusted_Connection=True;MultipleActiveResultSets=true",
    "CesarUsers": "Server=(localdb)\\mssqllocaldb;Database=CesarUsers;Trusted_Connection=True;MultipleActiveResultSets=true"
  },
  "JWT": {
    "Issuer": "Cesar Matelat",
    "Audience": "JardinApp",
    "Key": "Th1s1sMyKeyPleaseD0ntT0uch1t1sMin3Nom3J0"
  }
}

El Último Objeto: JWT, Es para Cifrar los Tokens de Usuarios Logueados, Issuer es el autor, Audience la APP, Key es la clave para Cifrar los Tokens.

La Ingeniería Inversa Crea la Clase de Contexto de los Productos/Artículos, se Puede Pedir que Agregue la Cadena de Conexión con la Base de Datos en la Clase de Contexto(Pero Prefiero Usar las de Proyectos Anteriores), Además hay que Seleccionar Usar los Nombres de las Tablas, Queda así:

public partial class JardineriaContext(DbContextOptions<JardineriaContext> options) : DbContext(options) // Extiende DbContext.
{
	public virtual DbSet<GamaProducto> Gama { get; set; }

	public virtual DbSet<Producto> Producto { get; set; }
	
	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<GamaProducto>().ToTable("gama_producto", t => t.ExcludeFromMigrations()); // Para Excluir las Tablas al Agregar la Migración del Nuevo Modelo.
		modelBuilder.Entity<Producto>().ToTable("producto", t => t.ExcludeFromMigrations());
		
		OnModelCreatingPartial(modelBuilder);
	}
	
	partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

Para Crear la Conexión con la Base de datos se usa: (localdb)\MSSQLlocaldb

Después se Puede Hacer el Scaffold (API: Api Controller With Actions, Using Entity Framework), por cada Tabla de la Base de Datos, ya tiene que Estar la Conexión con la Base de Datos en Program.cs y en appsettings.json, que Genera el Controlador con Todos los Métodos, Crear, Listar, Listar por ID, Modificar y Eliminar.

Después de Hacer el Scaffold Seguramente Habrá que Crear un Modelo de Reviews, Ventas, etc. y Agregar en el Contexto de los Artículos/Productos la Creación de los Datos.

Para Crear la Tabla del Nuevo Modelo e Insertar los Datos en la Base de Datos hay que Hacer la Migración:

add-migration Initial -Context GameStoreContext

update-database -Context GameStoreContext

Se Crea el Contexto de Usuarios, la Clase es:

public class CesarContext(DbContextOptions<CesarContext> options) : IdentityDbContext<JardinUser>(options)// Usa IdentityDbContext que es la Identity Estandar, si se Hace la base de Datos Personalizada como en este Caso se usa el Nombre del Modelo de los Usuarios que es JardinUser, el Modelo JardinUser extiende la Clase IdentityUser así: IdentityDbContext<JardinUser>.
{
	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		base.OnModelCreating(modelBuilder);
	}
}

Una Vez Creado el Contexto de Usuarios se Crean los Usuarios en el Contexto y se Hace la Migración de Usuarios:

add-migration Users -Context CesarContext

update-database -Context CesarUsersContext

Si solo Hubiera una Base de Datos con Identity, el Único Contexto tiene que Extender IdentityDbContext<IdentityUser>

El Modelo para el Login:

using System.ComponentModel.DataAnnotations;

namespace Jardineria.Models
{
    public class Login
    {
        [Required(ErrorMessage = "Campo Requerido."), Display(Name = "E-mail"), StringLength(24, MinimumLength = 6, ErrorMessage = "El E-mail Debe Tener al Menos {1} Caracteres.")]
        public string Email { get; set; }
        public string Password { get; set; } = "Asdf1234!";
    }
}

Y para el Register:

using System.ComponentModel.DataAnnotations;

namespace Jardineria.Models
{
    public class Register
    {
        [Required(ErrorMessage = "El Campo E-mail es Obligatorio."), Display(Name = "E-mail")]
        public string? Email { get; set; }
        [Required(ErrorMessage = "El Campo Contraseña es Obligatorio."), Display(Name = "Contraseña")]
        public string? Password { get; set; }
        [Required(ErrorMessage = "El Campo Nombre Completo es Obligatorio."), Display(Name = "Nombre Completo"), StringLength(64, MinimumLength = 10, ErrorMessage = "El Nombre del Usuario Debe Tener al Menos {2} Caracteres.")]
        public string? FullName { get; set; }
        [Required(ErrorMessage = "El Campo Dirección es Obligatorio.")]
        public string? Address { get; set; }
        [Required(ErrorMessage = "El Campo Código Postal es Obligatorio."), RegularExpression(@"^\d{5}$")]
        public string? PostalCode { get; set; }
        [Required(ErrorMessage = "El Campo Teléfono es Obligatorio."), RegularExpression(@"^\d{9}$")]
        public string? Phone { get; set; }
    }
}

Hay que crear el controlador para login y register y posiblemente upgrade de usuarios de basic a premiun y eso:

AuthContrroller:

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Jardineria.Data;
using Jardineria.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Authorization;

namespace Jardineria.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController(CesarContext context, UserManager<JardinUser> userManager, IConfiguration configuration) : ControllerBase
    {
        private readonly CesarContext _context = context;
        private readonly IConfiguration _configuration = configuration;
        private readonly UserManager<JardinUser> _userManager = userManager;

        // GET: api/JardinUsers
		[Authorize(Roles = "Admin")]
		[ProducesResponseType(StatusCodes.Status200OK)]
        [HttpGet("Users")]
        public async Task<IActionResult> Users()
        {
            var users = await _context.Users.Select(user => new
            {
                user.UserName,
                user.Email,
                user.FullName,
                user.Address,
                user.PostalCode,
                user.Phone

            }).ToListAsync();

            return Ok(users);
        }

		[ProducesResponseType(StatusCodes.Status200OK)]
		[ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [HttpPost("Login")]
        public async Task<IActionResult> Login([FromBody] Login model)
        {
            JardinUser user = await _userManager.FindByEmailAsync(model.Email);
            if (user != null && await _userManager.CheckPasswordAsync(user, model.Password))
            {
                IList<string> roles = await _userManager.GetRolesAsync(user);
                List<Claim> claims =
                [
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString() ),
                    new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString()),
                    new Claim(JwtRegisteredClaimNames.Sub, user.UserName)
                ];

                foreach (var role in roles)
                    claims.Add(new Claim(ClaimTypes.Role, role));

                var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JWT:Key"]));
                var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

                var token = new JwtSecurityToken
                    (
                        _configuration["JWT:Issuer"],
                        _configuration["JWT:Audience"],
                        claims,
                        expires: DateTime.UtcNow.AddMinutes(120),
                        signingCredentials: credentials
                    );
                return Ok(new JwtSecurityTokenHandler().WriteToken(token));
            }

            return Unauthorized();
        }

        // POST: api/JardinUsers
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
		[ProducesResponseType(StatusCodes.Status201Created)]
		[ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpPost("Register")]
        public async Task<IActionResult> Register([FromBody] Register model)
        {
			JardinUser userExists = await userManager.FindByNameAsync(model.Email);
			if (userExists != null)
			{
				return StatusCode(StatusCodes.Status500InternalServerError, new { Status = "Error", Message = "User already exists" });
			}

            JardinUser user = new()
            {
                UserName = model.Email,
                Email = model.Email,
                FullName = model.FullName,
                Address = model.Address,
                PostalCode = model.PostalCode,
                Phone = model.Phone
            };

            var createUser = await _userManager.CreateAsync(user, model.Password);

            if (createUser.Succeeded)
            {
                await _userManager.AddToRoleAsync(user, "Basic");

                return StatusCode(201);
            }

            return BadRequest();
        }

        [Authorize(Roles = "Basic")]
		[ProducesResponseType(StatusCodes.Status204NoContent)]
		[ProducesResponseType(StatusCodes.Status405MethodNotAllowed)]
        [HttpGet("Upgrade")]
        public async Task<IActionResult> Upgrade()
        {
            string? userName = _userManager.GetUserId(User);
            JardinUser? user = await _userManager.Users.FirstOrDefaultAsync(u => u.UserName == userName);
            var roles = await _userManager.GetRolesAsync(user);

            if (roles.Contains("Premium") || roles.Contains("Admin"))
            {
                return StatusCode(405);
            }

            await _userManager.AddToRoleAsync(user, "Premium");
			return NoContent();
        }
    }
}


Ejemplo de un Controlador con Authorize:

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Jardineria.Data;
using Jardineria.Models;
using Microsoft.AspNetCore.Authorization;

namespace Jardineria.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class ProductosController(JardineriaContext context) : ControllerBase
    {
        private readonly JardineriaContext _context = context;

        // GET: api/Productos
        [ProducesResponseType(StatusCodes.Status200OK)]
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Producto>>> GetProductos()
        {

            List<Producto> productos = await _context.producto
                .OrderBy(producto => producto.nombre)
                .Take(30)
                .ToListAsync();
            return Ok(productos);
        }

        // GET: api/Productos/5
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [HttpGet("{id}")]
        public async Task<ActionResult<Producto>> GetProducto(int id)
        {
            var producto = await _context.producto
                .Include(p => p.gamaNavigation)
                .Include(p => p.Reviews)
                .FirstOrDefaultAsync(p => p.codigo_producto == id);

            if (producto == null)
            {
                return NotFound();
            }

            return Ok(producto);
        }

        // PUT: api/Productos/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [Authorize(Roles = "Admin")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [HttpPut("{id}")]
        public async Task<IActionResult> PutProducto(int id, [FromBody] Producto producto)
        {
            _context.Entry(producto).State = EntityState.Modified;

            try
            {
                producto.codigo_producto = id;
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ProductoExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        private bool ProductoExists(int id)
        {
            return _context.producto.Any(e => e.codigo_producto == id);
        }
    }
}

