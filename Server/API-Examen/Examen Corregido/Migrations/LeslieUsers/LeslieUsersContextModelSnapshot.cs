// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PO03_01.Data;

#nullable disable

namespace PO03_01.Migrations.LeslieUsers
{
    [DbContext(typeof(LeslieUsersContext))]
    partial class LeslieUsersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c440bd9e-1c82-4990-824c-ca3c1013241b",
                            Name = "Comercial",
                            NormalizedName = "COMERCIAL"
                        },
                        new
                        {
                            Id = "22392e48-b91e-4695-8fbe-2b166460a8b3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2f766eee-a34c-4dca-aac5-d50e14480352",
                            RoleId = "c440bd9e-1c82-4990-824c-ca3c1013241b"
                        },
                        new
                        {
                            UserId = "50e71148-d416-4c70-8a91-8e7645d47e2d",
                            RoleId = "c440bd9e-1c82-4990-824c-ca3c1013241b"
                        },
                        new
                        {
                            UserId = "dc48341b-f4b5-4464-9bb3-2fb99a555285",
                            RoleId = "22392e48-b91e-4695-8fbe-2b166460a8b3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PO03_01.Models.Auth.GameStoreUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2f766eee-a34c-4dca-aac5-d50e14480352",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc3b44e9-7989-465f-b85f-1a32f57c9656",
                            Email = "comercial1@gamestore.com",
                            EmailConfirmed = false,
                            FullName = "Comercial 1",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMERCIAL1@GAMESTORE.COM",
                            NormalizedUserName = "COMERCIAL1@GAMESTORE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJIpqVrOD82mNJsQsSAuoYOmIyFuAU1fUValqTQRafUWPt71tEPZOjNBtyCzxFDQJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e16b7fb8-177e-44bc-90b4-792ae6bccd38",
                            TwoFactorEnabled = false,
                            UserName = "comercial1@gamestore.com"
                        },
                        new
                        {
                            Id = "50e71148-d416-4c70-8a91-8e7645d47e2d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd6d7d21-e880-4aa6-b02b-d1d89db3452b",
                            Email = "comercial2@gamestore.com",
                            EmailConfirmed = false,
                            FullName = "Comercial 2",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMERCIAL2@GAMESTORE.COM",
                            NormalizedUserName = "COMERCIAL2@GAMESTORE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOAyVqbuLzgZNvC/E1CUER4PoxRPUPFa8xK128+NiKCPYqL6zc+rh/d3qBV3LigxzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de2e60f3-98c3-45c9-b3af-4c8c30277265",
                            TwoFactorEnabled = false,
                            UserName = "comercial2@gamestore.com"
                        },
                        new
                        {
                            Id = "dc48341b-f4b5-4464-9bb3-2fb99a555285",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b11637a-85b2-42f5-8e8a-97b12136bb7f",
                            Email = "admin@gamestore.com",
                            EmailConfirmed = false,
                            FullName = "Usuario Admin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GAMESTORE.COM",
                            NormalizedUserName = "ADMIN@GAMESTORE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ9yNti86u2BPuKlDHo5zK70RgQ781fNTsr0h1hu2zC93UseO72KAHmMCTj8q8oYsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa0a2a45-3062-400c-ac56-fe7ac490615f",
                            TwoFactorEnabled = false,
                            UserName = "admin@gamestore.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PO03_01.Models.Auth.GameStoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PO03_01.Models.Auth.GameStoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PO03_01.Models.Auth.GameStoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PO03_01.Models.Auth.GameStoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
