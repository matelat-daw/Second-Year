// <auto-generated />
using System;
using Jardineria.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jardineria.Migrations
{
    [DbContext(typeof(CesarContext))]
    [Migration("20241207220432_JardinUser")]
    partial class JardinUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jardineria.Models.JardinUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8f26b2ef-03c3-42d8-8481-d286f7884209",
                            AccessFailedCount = 0,
                            Address = "Vive en la Nube",
                            ConcurrencyStamp = "54debbdb-4e00-468d-b877-99c7e011a47d",
                            Email = "admin@jardin.com",
                            EmailConfirmed = false,
                            FullName = "Administrador Total",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@JARDIN.COM",
                            NormalizedUserName = "ADMIN@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHEszZAuwL1EGwRmm1Kf3DCbT4tN8Xr6uJ0M9wFgswatP39uj63uJWzeMiw2yXzIIQ==",
                            Phone = "922220000",
                            PhoneNumberConfirmed = false,
                            PostalCode = "38001",
                            SecurityStamp = "e41df2e0-d513-44cf-bdcb-a1e41056a132",
                            TwoFactorEnabled = false,
                            UserName = "admin@jardin.com"
                        },
                        new
                        {
                            Id = "a23a8986-49fb-4eb1-8cfc-9922012d3c36",
                            AccessFailedCount = 0,
                            Address = "Vive en la Calle",
                            ConcurrencyStamp = "861d68dd-54da-424f-864c-1c17b78b1552",
                            Email = "basic@jardin.com",
                            EmailConfirmed = false,
                            FullName = "Juán de los Palotes",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASIC@JARDIN.COM",
                            NormalizedUserName = "BASIC@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENpHnBweoNAHa9wzKRNDCgU/7pyG4MOBjc7p+fHPZXlbVKIxV0itB1AAqtRcc+iktA==",
                            Phone = "922999999",
                            PhoneNumberConfirmed = false,
                            PostalCode = "38435",
                            SecurityStamp = "9e59a160-52c6-441d-a8d8-52e430c9e083",
                            TwoFactorEnabled = false,
                            UserName = "basic@jardin.com"
                        },
                        new
                        {
                            Id = "1ca1d8ec-9353-48da-aa94-3abb421f6fba",
                            AccessFailedCount = 0,
                            Address = "El Rosario",
                            ConcurrencyStamp = "b0e384a7-2d55-4e62-a582-08fea9f3c876",
                            Email = "premium@jardin.com",
                            EmailConfirmed = false,
                            FullName = "Cayetano De los Monteros",
                            LockoutEnabled = false,
                            NormalizedEmail = "PREMIUM@JARDIN.COM",
                            NormalizedUserName = "PREMIUM@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+WtSCYHKiGlIB6J8+LUyIlyUkXYbDXomUX0Ps7Modmvxnd08MCrm11sxmmBDCUkg==",
                            Phone = "922111111",
                            PhoneNumberConfirmed = false,
                            PostalCode = "38510",
                            SecurityStamp = "99512409-4bf6-4772-8506-8d22709e7537",
                            TwoFactorEnabled = false,
                            UserName = "premium@jardin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fc51614b-cc54-4a31-b081-6f5ac7abd245",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cf599d01-471c-4335-9efe-05827be4dd68",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "a53cfd90-4de6-4fbd-9b01-3157e10bd848",
                            Name = "Premium",
                            NormalizedName = "PREMIUM"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8f26b2ef-03c3-42d8-8481-d286f7884209",
                            RoleId = "fc51614b-cc54-4a31-b081-6f5ac7abd245"
                        },
                        new
                        {
                            UserId = "a23a8986-49fb-4eb1-8cfc-9922012d3c36",
                            RoleId = "cf599d01-471c-4335-9efe-05827be4dd68"
                        },
                        new
                        {
                            UserId = "1ca1d8ec-9353-48da-aa94-3abb421f6fba",
                            RoleId = "a53cfd90-4de6-4fbd-9b01-3157e10bd848"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Jardineria.Models.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Jardineria.Models.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jardineria.Models.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Jardineria.Models.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
