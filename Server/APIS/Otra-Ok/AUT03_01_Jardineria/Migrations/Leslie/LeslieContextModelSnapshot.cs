// <auto-generated />
using System;
using AUT03_01_Jardineria.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AUT03_01_Jardineria.Migrations
{
    [DbContext(typeof(LeslieContext))]
    partial class LeslieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AUT03_01_Jardineria.Models.Auth.JardinUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b9b50ae4-c1e1-4996-8a5c-bbbe6b43f404",
                            AccessFailedCount = 0,
                            Address = "Calle Wallaby 42, Sidney",
                            ConcurrencyStamp = "7ec1a259-7369-49e1-a970-7f3b146d109e",
                            Email = "basic@jardin.com",
                            EmailConfirmed = false,
                            FullName = "Usuario Basic",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASIC@JARDIN.COM",
                            NormalizedUserName = "BASIC@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDBnLxH9AVRixco4Mt2WwG1yldTZIkudmMo3+VG2Qn6VhVSr5kMTI2z3RR3qdb4D/Q==",
                            Phone = "666777888",
                            PhoneNumberConfirmed = false,
                            PostalCode = "55555",
                            SecurityStamp = "db5da620-8633-4bf5-955a-93df8f5d7e30",
                            TwoFactorEnabled = false,
                            UserName = "basic@jardin.com"
                        },
                        new
                        {
                            Id = "88196bbf-c134-4552-8558-0feddf9b6b7f",
                            AccessFailedCount = 0,
                            Address = "742 Evergreen Terrace, Springfield",
                            ConcurrencyStamp = "76581b15-e56b-4795-8eab-ec47ee048c08",
                            Email = "premium@jardin.com",
                            EmailConfirmed = false,
                            FullName = "Usuario Premium",
                            LockoutEnabled = false,
                            NormalizedEmail = "PREMIUM@JARDIN.COM",
                            NormalizedUserName = "PREMIUM@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOzsMYW8rFrNE5q4ygUovuyV8Go+W1NNp81thdoLMNNxg3ggjiM1neh4AJjS4WQHJA==",
                            Phone = "666555444",
                            PhoneNumberConfirmed = false,
                            PostalCode = "77777",
                            SecurityStamp = "0d8432bc-59f3-4b76-81d7-c0e344ce9c17",
                            TwoFactorEnabled = false,
                            UserName = "premium@jardin.com"
                        },
                        new
                        {
                            Id = "84c2bbec-8ccc-420f-828b-a990bea58b6e",
                            AccessFailedCount = 0,
                            Address = "221B Baker Street, London",
                            ConcurrencyStamp = "4ce48f30-74de-4544-beb3-3c4c86a783d3",
                            Email = "admin@jardin.com",
                            EmailConfirmed = false,
                            FullName = "Usuario Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@JARDIN.COM",
                            NormalizedUserName = "ADMIN@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK/SHvIQpH34mYWfogS+fLysSwPUBEhu5WUT5+tSSJMx4nxd64C+o7/J32ZepMgIsA==",
                            Phone = "654987321",
                            PhoneNumberConfirmed = false,
                            PostalCode = "88888",
                            SecurityStamp = "2b6945cf-39c2-4657-a899-6dafc6110254",
                            TwoFactorEnabled = false,
                            UserName = "admin@jardin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8c868e5b-97d9-4f41-9423-673de9582a56",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "50f16a90-f54b-4adb-9b55-f817a659b158",
                            Name = "Premium",
                            NormalizedName = "PREMIUM"
                        },
                        new
                        {
                            Id = "f37c8a63-b9ed-4103-9d39-d2c67708cf03",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b9b50ae4-c1e1-4996-8a5c-bbbe6b43f404",
                            RoleId = "8c868e5b-97d9-4f41-9423-673de9582a56"
                        },
                        new
                        {
                            UserId = "88196bbf-c134-4552-8558-0feddf9b6b7f",
                            RoleId = "50f16a90-f54b-4adb-9b55-f817a659b158"
                        },
                        new
                        {
                            UserId = "84c2bbec-8ccc-420f-828b-a990bea58b6e",
                            RoleId = "f37c8a63-b9ed-4103-9d39-d2c67708cf03"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AUT03_01_Jardineria.Models.Auth.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AUT03_01_Jardineria.Models.Auth.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AUT03_01_Jardineria.Models.Auth.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AUT03_01_Jardineria.Models.Auth.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
